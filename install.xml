<?xml version="1.0" encoding="UTF-8"?>
<modification>
    <code>SmartiApps Price Slider</code>
    <name>SmartiApps Price Slider</name>
    <version>3.0.2.0.x</version>
    <author>SmartiApps</author>
     <file path="catalog/controller/product/category.php">
        <operation error="log">
            <search ><![CDATA[
            $this->load->model('tool/image');
			]]>
            </search>
            <add position="after"><![CDATA[
		$priceslide_status = $this->config->get('module_price_slider_status');

        $price_Range = '';
            if ($priceslide_status == "1") {
                $min_max = '';
                if (isset($this->request->get['pr'])) {
                    $pr = $this->request->get['pr'];
                    $price_min_max = explode(',', $pr);
                    $price_range_min = (int)$price_min_max[0];
                    $price_range_max = (int)$price_min_max[1];
                    $price_Range = '';
                } else {
                    if (isset($this->request->get['path'])) {
                        $parts = explode('_', (string)$this->request->get['path']);

                        $category_id = (int)array_pop($parts);

                    } else {
                        $category_id = 0;
                    }
                    $category_info = $this->model_catalog_category->getCategory($category_id);

                    if ($category_info) {
                        $filter_data = array(
                            'filter_category_id' => $category_id,
                        );
                        $results = $this->model_catalog_product->getMinMaxProduct($filter_data);

                        foreach ($results as $result) {
                            if (!$min_max) {
                                $min_max = (int)$result;
                            } else {
                                $min_max .= '-' . (int)$result;
                            }

                        }
                    }
                    if ($min_max != 0) {
                        $price_Range = str_replace('-', ',', $min_max);
                        $price_min_max = explode('-', $min_max);
                        $price_range_min = (int)$price_min_max[0];
                        $price_range_max = (int)$price_min_max[1];
                    } else {
                        $price_Range = '';
                    }

                }
            }
		]]></add>
        </operation>
        <operation error="log">
            <search><![CDATA[
            $data['breadcrumbs'] = array();
			]]>
            </search>
            <add position="before"><![CDATA[
		if ($priceslide_status == "1") {
                if (isset($this->request->get['pr'])) {
                    $pr = $this->request->get['pr'];
                    $priceSlider_range = explode(',', $pr);
                    $price_min = $this->currency->convert($priceSlider_range[0], $this->session->data['currency'], $this->config->get('config_currency'));
                    $price_max = $this->currency->convert($priceSlider_range[1], $this->session->data['currency'], $this->config->get('config_currency'));

                    if ($price_max != null) {
                        $price_max = round($price_max);
                        $price_max = $price_max + (10 - (substr($price_max, -1)));

                    }
                    $pr = $price_min . "," . $price_max;

                } else {
                    $pr = $price_Range;
                }
            }
		]]></add>
        </operation>
        <operation error="log">

            <search><![CDATA[
            $path = '';
			]]>
            </search>
            <add position="before"><![CDATA[
		if (isset($this->request->get['pr'])) {
                    $pr = $this->request->get['pr'];
                    $priceSlider_range = explode(',', $pr);
                    $price_min = $this->currency->convert($priceSlider_range[0], $this->session->data['currency'], $this->config->get('config_currency'));
                    $price_max = $this->currency->convert($priceSlider_range[1], $this->session->data['currency'], $this->config->get('config_currency'));


                    $pr = $price_min . "," . $price_max;

                } else {
                    $pr = $price_Range;
                }
		]]></add>
        </operation>
        <operation error="log">
            <search><![CDATA[
            $data['categories'] = array();
			]]>
            </search>
            <add position="before"><![CDATA[
		if ($priceslide_status == "1") {
		if (isset($this->request->get['pr'])) {
				$url .= '&pr=' . $this->request->get['pr'];
			}
	}

		]]></add>
        </operation>

        <operation error="log">
            <search><![CDATA[
           $data['products'] = array();
			]]>
            </search>
            <add position="after"><![CDATA[
		    if ($priceslide_status == "1") {
		if (version_compare(VERSION, '2.2.0.0', '<') == true) {
				$pcode = $this->currency->getCode();
			} else {
				$pcode = $this->session->data['currency'];
			}
			$currency_value = $this->currency->getValue($pcode);
	}

		    ]]></add>
        </operation>

        <operation error="log">
            <search><![CDATA[
           $product_total = $this->model_catalog_product->getTotalProducts($filter_data);
			]]>
            </search>
            <add position="before"><![CDATA[
            if ($priceslide_status == "1") {
                    if (isset($pr)) {
                        $filter_data['filter_price'] = $pr;
                        $filter_data['currency_value'] = $currency_value;
                    }
                    }
		]]></add>
        </operation>

        <operation error="log">
            <search><![CDATA[
           $data['limits'] = array();
			]]>
            </search>
            <add position="before"><![CDATA[
            if ($priceslide_status == "1") {
		if (isset($this->request->get['pr'])) {
				$url .= '&pr=' . $this->request->get['pr'];
			}
			}
		]]></add>
        </operation>
        <operation error="log">
            <search><![CDATA[
           $pagination = new Pagination();
			]]>
            </search>
            <add position="before"><![CDATA[
            if ($priceslide_status == "1") {
		if (isset($this->request->get['pr'])) {
				$url .= '&pr=' . $this->request->get['pr'];
			}
			}
		]]></add>
        </operation>



    </file>

    <file path="catalog/model/catalog/product.php">
        <operation error="log">
            <search><![CDATA[
            return array(
			]]>
            </search>
            <add position="replace"><![CDATA[
		        $product_data_array = array(
		    ]]></add>
        </operation>
        <operation error="log">
            <search><![CDATA[
                'viewed'           => $query->row['viewed']
			]]>
            </search>
            <add position="after" offset="1"><![CDATA[
		        return $product_data_array;
		    ]]></add>
        </operation>

        <operation error="log">
            <search><![CDATA[
           $product_data[$result['product_id']] = $this->getProduct($result['product_id']);
			]]>
            </search>
            <add position="replace" index="1"><![CDATA[

            if (!isset($data['filter_price'])) {
                $product_data[$result['product_id']] = $this->getProduct($result['product_id']);
            } else {
                $filter = explode(",", $data['filter_price']);
                $product = $this->getProduct($result['product_id']);
                if (!empty($product['special'])) {

                    $special = $this->tax->calculate($product['special'], $product['tax_class_id'], $this->config->get('config_tax'));
                    if ($special >= $filter[0] && $special <= $filter[1]) {
                        $product_data[$result['product_id']] = $product;
                    }
                } else {
                    $orig_price = $this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax'));
                    if ($orig_price >= $filter[0] && $orig_price <= $filter[1]) {
                        $product_data[$result['product_id']] = $product;
                    }
                }
            }

		]]></add>
        </operation>

        <operation error="log">
            <search><![CDATA[
          $sql = "SELECT COUNT(DISTINCT p.product_id) AS total";
			]]>
            </search>
            <add position="replace"><![CDATA[

           if (!isset($data['filter_price'])) {
            $sql = "SELECT COUNT(DISTINCT p.product_id) AS total";
        } else {
            $sql = "SELECT DISTINCT p.product_id";
        }

		]]></add>
        </operation>

        <operation error="log">
            <search><![CDATA[
           return $query->row['total'];
			]]>
            </search>
            <add position="replace" index="1"><![CDATA[

       if (isset($data['filter_price'])) {
            $total_products = 0;
            foreach ($query->rows as $result) {
                $product = $this->getProduct($result['product_id']);
                //filtering products with price range
                if (!empty($data['filter_price'])) {
                    $filter = explode(",", $data['filter_price']);
                    $min = $filter[0];
                    $max = $filter[1];
                    if ($max > 0) {

                        if ($product['special']) {
                            $price = $product['special'];
                        } else {
                            $price = $product['price'];
                        }
                        $price = $this->tax->calculate($price, $product['tax_class_id'], $this->config->get('config_tax'));


                        if ($price < $min || $price > $max) {
                            continue;
                        }
                    }
                }
                $total_products++;

            }
            return $total_products;
        }else{
            return $query->row['total'];
        }

		]]></add>
        </operation>
        <operation error="log">
            <search><![CDATA[
                $sql .= " LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'";
			]]>
            </search>
            <add position="replace"><![CDATA[
		        $sql .= " LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) LEFT JOIN " . DB_PREFIX . "product_special ps ON p.product_id = ps.product_id LEFT JOIN " . DB_PREFIX . "product_discount pds ON p.product_id = p2s.product_id WHERE pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "'";
		    ]]></add>
        </operation>

        <operation error="log">
            <search><![CDATA[
                public function updateViewed($product_id)
            ]]>
            </search>
            <add position="before"><![CDATA[
                 public function getMinMaxProduct($data = array())
    {
        $min_price = $this->db->query("SELECT MIN(ps.price) as min_special,MIN(p.price) as min_price FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (p2c.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_special ps ON (ps.product_id = p.product_id) WHERE p2c.category_id = '" . (int)$data['filter_category_id'] . "'");
        $max_price = $this->db->query("SELECT MAX(p.price) as max,p.tax_class_id, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (p2c.product_id = p.product_id) LEFT JOIN " . DB_PREFIX . "product_special ps ON (ps.product_id = p.product_id) WHERE p.price = (SELECT MAX(price) FROM " . DB_PREFIX . "product  p LEFT JOIN " . DB_PREFIX . "product_to_category p2c ON (p2c.product_id = p.product_id) WHERE p2c.category_id = '" . (int)$data['filter_category_id'] . "' ) AND p2c.category_id = '" . (int)$data['filter_category_id'] . "'");

        if (!empty($max_price->row['special'])) {
            $price = $max_price->row['special'];
        } else {
            $price = $max_price->row['max'];
        }
        $max = $this->tax->calculate($price, $max_price->row['tax_class_id'], $this->config->get('config_tax'));
        if (isset($min_price->row['min_special'])) {
            $min = $min_price->row['min_special'];
        } else {
            $min = $min_price->row['min_price'];
        }
        if ($max != null){
        $max = round($max);
        $max = $max+(10-(substr($max,-1)));

    }
        $min_max = array(
            'min' => $min,
            'max' => $max,
        );

        return $min_max;
    }
            ]]></add>
        </operation>

    </file>

</modification>